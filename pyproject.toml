[build-system]
requires = [
    "setuptools>=42.0.0",
    "setuptools_scm[toml]>=3.4"
]

build-backend = "setuptools.build_meta"

[project]
name = "dspeed"
description = "Fast Digital Signal Processing for particle detectors in Python"
authors = [
    { name = "Ian Guinn", email = "guinnis@ornl.gov"},
]
maintainers = [
    { name = "The LEGEND collaboration" },
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
    "Operating System :: MacOS",
    "Operating System :: POSIX",
    "Operating System :: Unix",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Topic :: Scientific/Engineering :: Mathematics",
    "Topic :: Scientific/Engineering :: Physics",
    "Topic :: Software Development",
]
requires-python = ">=3.9"
dependencies=[
    "PyWavelets",
    "colorlog",
    "h5py>=3.2",
    "iminuit",
    "legend-pydataobj>=1.5.0a1",
    "matplotlib",
    "numba!=0.53.*,!=0.54.*",
    "numpy",
    "parse",
    "pint",
    "pyarrow",
    "scipy",
    "tqdm>=4.27",
]
dynamic = [
    "version",
]

[project.urls]
Homepage = "https://github.com/legend-exp/dspeed"
"Bug Tracker" = "https://github.com/legend-exp/dspeed/issues"
Discussions = "https://github.com/legend-exp/dspeed/discussions"
Changelog = "https://github.com/legend-exp/dspeed/releases"

[tool.setuptools_scm]
write_to = "src/dspeed/_version.py"

[project.optional-dependencies]
all = [
    "dspeed[docs,test]",
]
docs = [
    "furo",
    "jupyter",
    "myst-parser",
    "nbsphinx",
    "sphinx",
    "sphinx-copybutton",
    "sphinx-inline-tabs",
]
test = [
    "pre-commit",
    "pylegendtestdata",
    "pytest>=6.0",
    "pytest-cov",
]

[project.scripts]
dspeed = "dspeed.cli:dspeed_cli"

[tool.setuptools]
include-package-data = true
zip-safe = false
license-files = [
    "LICENSE",
]

[tool.setuptools.package-dir]
"" = "src"

[tool.setuptools.packages.find]
where = [
    "src",
]
namespaces = false

[tool.setuptools.package-data]
"*" = [
    "*.json",
]

[tool.coverage]
run.source = ["dspeed"]
report.exclude_also = [
  '\.\.\.',
  'if typing.TYPE_CHECKING:',
]

[tool.flake8]
extend-ignore = "E203, E501, D10"

[tool.codespell]
ignore-words-list = "nin, sav"

[tool.pytest.ini_options]
minversion = "6.0"
addopts = ["-ra", "--showlocals", "--strict-markers", "--strict-config"]
xfail_strict = true
filterwarnings = "error"
log_cli_level = "INFO"
testpaths = "tests"

[tool.isort]
profile = "black"
multi_line_output = 3


# I leave this here to go from flake8 to ruff
# may give a few errors :)

#[tool.ruff]
#src = ["src"]

# [tool.ruff.lint]
# extend-select = [
#   "B",        # flake8-bugbear
#   "I",        # isort
#   "ARG",      # flake8-unused-arguments
#   "C4",       # flake8-comprehensions
#   "EM",       # flake8-errmsg
#   "ICN",      # flake8-import-conventions
#   #"G",        # flake8-logging-format
#   "PGH",      # pygrep-hooks
#   "PIE",      # flake8-pie
#   "PL",       # pylint
#   "PT",       # flake8-pytest-style
#   #"PTH",      # flake8-use-pathlib
#   "RET",      # flake8-return
#   "RUF",      # Ruff-specific
#   "SIM",      # flake8-simplify
#   "T20",      # flake8-print
#   "UP",       # pyupgrade
#   "YTT",      # flake8-2020
#   "EXE",      # flake8-executable
#   "NPY",      # NumPy specific rules
#   # "PD",       # pandas-vet
# ]
# ignore = [
#   "PLR09",    # Too many <...>
#   "PLR2004",  # Magic value used in comparison
#   "ISC001",   # Conflicts with formatter
#   "PT011",
#   "RUF013",   # complains if you default to None for an asinine reason
# ]
# isort.required-imports = ["from __future__ import annotations"]
# # Uncomment if using a _compat.typing backport
# # typing-modules = ["lgdo._compat.typing"]

# [tool.ruff.lint.per-file-ignores]
# "tests/**" = ["T20"]
# "noxfile.py" = ["T20"]
# "docs/source/notebooks/*" = ["T201", "E402"]

# [tool.pylint]
# py-version = "3.8"
# ignore-paths = [".*/_version.py"]
# reports.output-format = "colorized"
# similarities.ignore-imports = "yes"
# messages_control.disable = [
#   "design",
#   "fixme",
#   "line-too-long",
#   "missing-module-docstring",
#   "wrong-import-position",
# ]
